// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tool.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DbInfo struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	UserName string `protobuf:"bytes,4,opt,name=userName" json:"userName,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Id       int64  `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
}

func (m *DbInfo) Reset()                    { *m = DbInfo{} }
func (m *DbInfo) String() string            { return proto.CompactTextString(m) }
func (*DbInfo) ProtoMessage()               {}
func (*DbInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *DbInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DbInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DbInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DbInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *DbInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DbInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 创建数据库
type DbCreateOrModifyReq struct {
	Db *DbInfo `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
}

func (m *DbCreateOrModifyReq) Reset()                    { *m = DbCreateOrModifyReq{} }
func (m *DbCreateOrModifyReq) String() string            { return proto.CompactTextString(m) }
func (*DbCreateOrModifyReq) ProtoMessage()               {}
func (*DbCreateOrModifyReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *DbCreateOrModifyReq) GetDb() *DbInfo {
	if m != nil {
		return m.Db
	}
	return nil
}

// 创建数据库
type DbCreateOrModifyRsp struct {
}

func (m *DbCreateOrModifyRsp) Reset()                    { *m = DbCreateOrModifyRsp{} }
func (m *DbCreateOrModifyRsp) String() string            { return proto.CompactTextString(m) }
func (*DbCreateOrModifyRsp) ProtoMessage()               {}
func (*DbCreateOrModifyRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

// 数据库详情
type DbDetailByIDReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DbDetailByIDReq) Reset()                    { *m = DbDetailByIDReq{} }
func (m *DbDetailByIDReq) String() string            { return proto.CompactTextString(m) }
func (*DbDetailByIDReq) ProtoMessage()               {}
func (*DbDetailByIDReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *DbDetailByIDReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DbDetailByIDRsp struct {
	Db *DbInfo `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
}

func (m *DbDetailByIDRsp) Reset()                    { *m = DbDetailByIDRsp{} }
func (m *DbDetailByIDRsp) String() string            { return proto.CompactTextString(m) }
func (*DbDetailByIDRsp) ProtoMessage()               {}
func (*DbDetailByIDRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *DbDetailByIDRsp) GetDb() *DbInfo {
	if m != nil {
		return m.Db
	}
	return nil
}

// 数据库分页
type DbPageReq struct {
	PageNo   int32   `protobuf:"varint,1,opt,name=pageNo" json:"pageNo,omitempty"`
	PageSize int32   `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
	Sorter   *Sorter `protobuf:"bytes,3,opt,name=sorter" json:"sorter,omitempty"`
}

func (m *DbPageReq) Reset()                    { *m = DbPageReq{} }
func (m *DbPageReq) String() string            { return proto.CompactTextString(m) }
func (*DbPageReq) ProtoMessage()               {}
func (*DbPageReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *DbPageReq) GetPageNo() int32 {
	if m != nil {
		return m.PageNo
	}
	return 0
}

func (m *DbPageReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *DbPageReq) GetSorter() *Sorter {
	if m != nil {
		return m.Sorter
	}
	return nil
}

// 数据库分页
type DbPageRsp struct {
	List []*DbInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Page *PageRsp  `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *DbPageRsp) Reset()                    { *m = DbPageRsp{} }
func (m *DbPageRsp) String() string            { return proto.CompactTextString(m) }
func (*DbPageRsp) ProtoMessage()               {}
func (*DbPageRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *DbPageRsp) GetList() []*DbInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DbPageRsp) GetPage() *PageRsp {
	if m != nil {
		return m.Page
	}
	return nil
}

// 所有数据库
type DbAllNameReq struct {
}

func (m *DbAllNameReq) Reset()                    { *m = DbAllNameReq{} }
func (m *DbAllNameReq) String() string            { return proto.CompactTextString(m) }
func (*DbAllNameReq) ProtoMessage()               {}
func (*DbAllNameReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

// 所有数据库
type DbAllNameRsp struct {
	Dbs []*DbInfo `protobuf:"bytes,1,rep,name=dbs" json:"dbs,omitempty"`
}

func (m *DbAllNameRsp) Reset()                    { *m = DbAllNameRsp{} }
func (m *DbAllNameRsp) String() string            { return proto.CompactTextString(m) }
func (*DbAllNameRsp) ProtoMessage()               {}
func (*DbAllNameRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *DbAllNameRsp) GetDbs() []*DbInfo {
	if m != nil {
		return m.Dbs
	}
	return nil
}

// 连接
type DbConnectReq struct {
	Id     int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DbName string `protobuf:"bytes,2,opt,name=dbName" json:"dbName,omitempty"`
}

func (m *DbConnectReq) Reset()                    { *m = DbConnectReq{} }
func (m *DbConnectReq) String() string            { return proto.CompactTextString(m) }
func (*DbConnectReq) ProtoMessage()               {}
func (*DbConnectReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *DbConnectReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DbConnectReq) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

// 连接
type DbConnectRsp struct {
	Key       string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id        int64    `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	DbName    string   `protobuf:"bytes,3,opt,name=dbName" json:"dbName,omitempty"`
	TableName []string `protobuf:"bytes,4,rep,name=tableName" json:"tableName,omitempty"`
}

func (m *DbConnectRsp) Reset()                    { *m = DbConnectRsp{} }
func (m *DbConnectRsp) String() string            { return proto.CompactTextString(m) }
func (*DbConnectRsp) ProtoMessage()               {}
func (*DbConnectRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *DbConnectRsp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DbConnectRsp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DbConnectRsp) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *DbConnectRsp) GetTableName() []string {
	if m != nil {
		return m.TableName
	}
	return nil
}

// 表模型
type DbTableModelReq struct {
	Key  string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *DbTableModelReq) Reset()                    { *m = DbTableModelReq{} }
func (m *DbTableModelReq) String() string            { return proto.CompactTextString(m) }
func (*DbTableModelReq) ProtoMessage()               {}
func (*DbTableModelReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *DbTableModelReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DbTableModelReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 表模型
type DbTableModelRsp struct {
	Model string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
}

func (m *DbTableModelRsp) Reset()                    { *m = DbTableModelRsp{} }
func (m *DbTableModelRsp) String() string            { return proto.CompactTextString(m) }
func (*DbTableModelRsp) ProtoMessage()               {}
func (*DbTableModelRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *DbTableModelRsp) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

// 删除
type DbDelReq struct {
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *DbDelReq) Reset()                    { *m = DbDelReq{} }
func (m *DbDelReq) String() string            { return proto.CompactTextString(m) }
func (*DbDelReq) ProtoMessage()               {}
func (*DbDelReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *DbDelReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

// 删除
type DbDelRsp struct {
}

func (m *DbDelRsp) Reset()                    { *m = DbDelRsp{} }
func (m *DbDelRsp) String() string            { return proto.CompactTextString(m) }
func (*DbDelRsp) ProtoMessage()               {}
func (*DbDelRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func init() {
	proto.RegisterType((*DbInfo)(nil), "pb.DbInfo")
	proto.RegisterType((*DbCreateOrModifyReq)(nil), "pb.DbCreateOrModifyReq")
	proto.RegisterType((*DbCreateOrModifyRsp)(nil), "pb.DbCreateOrModifyRsp")
	proto.RegisterType((*DbDetailByIDReq)(nil), "pb.DbDetailByIDReq")
	proto.RegisterType((*DbDetailByIDRsp)(nil), "pb.DbDetailByIDRsp")
	proto.RegisterType((*DbPageReq)(nil), "pb.DbPageReq")
	proto.RegisterType((*DbPageRsp)(nil), "pb.DbPageRsp")
	proto.RegisterType((*DbAllNameReq)(nil), "pb.DbAllNameReq")
	proto.RegisterType((*DbAllNameRsp)(nil), "pb.DbAllNameRsp")
	proto.RegisterType((*DbConnectReq)(nil), "pb.DbConnectReq")
	proto.RegisterType((*DbConnectRsp)(nil), "pb.DbConnectRsp")
	proto.RegisterType((*DbTableModelReq)(nil), "pb.DbTableModelReq")
	proto.RegisterType((*DbTableModelRsp)(nil), "pb.DbTableModelRsp")
	proto.RegisterType((*DbDelReq)(nil), "pb.DbDelReq")
	proto.RegisterType((*DbDelRsp)(nil), "pb.DbDelRsp")
}

func init() { proto.RegisterFile("tool.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x55, 0x9c, 0x26, 0xda, 0x4e, 0x57, 0x0b, 0x32, 0x1f, 0x8a, 0xaa, 0x0a, 0x8a, 0x2f, 0xf4,
	0x00, 0x95, 0x58, 0x24, 0x38, 0xc3, 0xe6, 0xb2, 0x12, 0xbb, 0x20, 0x2f, 0x7f, 0x20, 0xae, 0xa7,
	0x55, 0x44, 0x1a, 0x7b, 0x63, 0x23, 0x54, 0x7e, 0x01, 0x3f, 0x1b, 0x8d, 0xe3, 0x76, 0xab, 0x12,
	0x71, 0x9b, 0x37, 0x1f, 0xef, 0x4d, 0xc6, 0x2f, 0x00, 0xde, 0x98, 0x66, 0x69, 0x3b, 0xe3, 0x0d,
	0x67, 0x56, 0x4d, 0xcf, 0x57, 0x66, 0xbb, 0x35, 0x6d, 0x9f, 0x11, 0x7f, 0x12, 0xc8, 0x4b, 0x75,
	0xdd, 0xae, 0x0d, 0xe7, 0x30, 0x6a, 0xab, 0x2d, 0x16, 0xc9, 0x3c, 0x59, 0x8c, 0x65, 0x88, 0xf9,
	0x05, 0xb0, 0xda, 0x16, 0x2c, 0x64, 0x58, 0x6d, 0xa9, 0xc7, 0x9a, 0xce, 0x17, 0xe9, 0x3c, 0x59,
	0x64, 0x32, 0xc4, 0x7c, 0x0a, 0x67, 0x3f, 0x1d, 0x76, 0xb7, 0x34, 0x3b, 0x0a, 0x9d, 0x07, 0x4c,
	0x35, 0x5b, 0x39, 0xf7, 0xcb, 0x74, 0xba, 0xc8, 0xfa, 0xda, 0x1e, 0x07, 0x6e, 0x5d, 0xe4, 0xf3,
	0x64, 0x91, 0x4a, 0x56, 0x6b, 0xf1, 0x0e, 0x9e, 0x94, 0xea, 0xaa, 0xc3, 0xca, 0xe3, 0xd7, 0xee,
	0xc6, 0xe8, 0x7a, 0xbd, 0x93, 0x78, 0xcf, 0xa7, 0xc0, 0xb4, 0x0a, 0x4b, 0x4d, 0x2e, 0x61, 0x69,
	0xd5, 0xb2, 0x5f, 0x57, 0x32, 0xad, 0xc4, 0xb3, 0x81, 0x11, 0x67, 0xc5, 0x2b, 0x78, 0x54, 0xaa,
	0x12, 0x7d, 0x55, 0x37, 0x9f, 0x77, 0xd7, 0x25, 0xb1, 0xf4, 0x62, 0xc9, 0x41, 0xec, 0xed, 0x49,
	0x8b, 0xb3, 0xff, 0x15, 0x5a, 0xc1, 0xb8, 0x54, 0xdf, 0xaa, 0x0d, 0x12, 0xd7, 0x73, 0xc8, 0x6d,
	0xb5, 0xc1, 0x5b, 0x13, 0x9a, 0x33, 0x19, 0x51, 0xff, 0xb1, 0x1b, 0xbc, 0xab, 0x7f, 0x63, 0x38,
	0x59, 0x26, 0x0f, 0x98, 0x0b, 0xc8, 0x9d, 0xe9, 0x3c, 0x76, 0xe1, 0x74, 0x51, 0xe0, 0x2e, 0x64,
	0x64, 0xac, 0x88, 0x2f, 0x07, 0x11, 0x67, 0xf9, 0x0b, 0x18, 0x35, 0xb5, 0xf3, 0x45, 0x32, 0x4f,
	0x4f, 0xf6, 0x09, 0x79, 0xfe, 0x12, 0x46, 0x44, 0x1e, 0x84, 0x26, 0x97, 0x13, 0xaa, 0xc7, 0x51,
	0x19, 0x0a, 0xe2, 0x02, 0xce, 0x4b, 0xf5, 0xa9, 0x69, 0xe8, 0x1d, 0x24, 0xde, 0x8b, 0x37, 0xc7,
	0xd8, 0x59, 0x3e, 0x83, 0x54, 0x2b, 0x37, 0xc0, 0x4f, 0x69, 0xf1, 0x81, 0xba, 0xaf, 0x4c, 0xdb,
	0xe2, 0xca, 0x0f, 0xdc, 0x8f, 0x6e, 0xa0, 0x55, 0x78, 0xf2, 0xde, 0x1c, 0x11, 0x89, 0xf5, 0xf1,
	0x9c, 0xb3, 0xfc, 0x31, 0xa4, 0x3f, 0x70, 0x17, 0x3d, 0x45, 0x61, 0x64, 0x62, 0x03, 0x4c, 0xe9,
	0x31, 0x13, 0x9f, 0xc1, 0xd8, 0x57, 0xaa, 0xc1, 0xe8, 0xab, 0x74, 0x31, 0x96, 0x0f, 0x09, 0xf1,
	0x91, 0xde, 0xef, 0x3b, 0xc1, 0x1b, 0xa3, 0xb1, 0xa1, 0x15, 0xff, 0x95, 0xda, 0x3b, 0x9a, 0x3d,
	0x38, 0x5a, 0xbc, 0x3e, 0x19, 0x74, 0x96, 0x3f, 0x85, 0x6c, 0x4b, 0x71, 0x1c, 0xed, 0x81, 0x98,
	0xc1, 0x19, 0x39, 0x64, 0x4f, 0x5d, 0xeb, 0xfe, 0x56, 0xa9, 0xa4, 0x50, 0xc0, 0xbe, 0xea, 0xac,
	0xca, 0xc3, 0xaf, 0xf4, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x1e, 0x25, 0x13, 0x6a,
	0x03, 0x00, 0x00,
}
