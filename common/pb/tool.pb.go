// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tool.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DbInfo struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	UserName string `protobuf:"bytes,4,opt,name=userName" json:"userName,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Id       int64  `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
}

func (m *DbInfo) Reset()                    { *m = DbInfo{} }
func (m *DbInfo) String() string            { return proto.CompactTextString(m) }
func (*DbInfo) ProtoMessage()               {}
func (*DbInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *DbInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DbInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DbInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DbInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *DbInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DbInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 创建数据库
type DbCreateOrModifyReq struct {
	Db *DbInfo `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
}

func (m *DbCreateOrModifyReq) Reset()                    { *m = DbCreateOrModifyReq{} }
func (m *DbCreateOrModifyReq) String() string            { return proto.CompactTextString(m) }
func (*DbCreateOrModifyReq) ProtoMessage()               {}
func (*DbCreateOrModifyReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *DbCreateOrModifyReq) GetDb() *DbInfo {
	if m != nil {
		return m.Db
	}
	return nil
}

// 创建数据库
type DbCreateOrModifyRsp struct {
}

func (m *DbCreateOrModifyRsp) Reset()                    { *m = DbCreateOrModifyRsp{} }
func (m *DbCreateOrModifyRsp) String() string            { return proto.CompactTextString(m) }
func (*DbCreateOrModifyRsp) ProtoMessage()               {}
func (*DbCreateOrModifyRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

// 数据库详情
type DbDetailByIDReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DbDetailByIDReq) Reset()                    { *m = DbDetailByIDReq{} }
func (m *DbDetailByIDReq) String() string            { return proto.CompactTextString(m) }
func (*DbDetailByIDReq) ProtoMessage()               {}
func (*DbDetailByIDReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *DbDetailByIDReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DbDetailByIDRsp struct {
	Db *DbInfo `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
}

func (m *DbDetailByIDRsp) Reset()                    { *m = DbDetailByIDRsp{} }
func (m *DbDetailByIDRsp) String() string            { return proto.CompactTextString(m) }
func (*DbDetailByIDRsp) ProtoMessage()               {}
func (*DbDetailByIDRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *DbDetailByIDRsp) GetDb() *DbInfo {
	if m != nil {
		return m.Db
	}
	return nil
}

// 数据库分页
type DbPageReq struct {
	PageNo   int32 `protobuf:"varint,1,opt,name=pageNo" json:"pageNo,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
}

func (m *DbPageReq) Reset()                    { *m = DbPageReq{} }
func (m *DbPageReq) String() string            { return proto.CompactTextString(m) }
func (*DbPageReq) ProtoMessage()               {}
func (*DbPageReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *DbPageReq) GetPageNo() int32 {
	if m != nil {
		return m.PageNo
	}
	return 0
}

func (m *DbPageReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 数据库分页
type DbPageRsp struct {
	Dbs      []*DbInfo `protobuf:"bytes,1,rep,name=dbs" json:"dbs,omitempty"`
	PageNo   int32     `protobuf:"varint,2,opt,name=pageNo" json:"pageNo,omitempty"`
	PageSize int32     `protobuf:"varint,3,opt,name=pageSize" json:"pageSize,omitempty"`
	IsMore   int32     `protobuf:"varint,4,opt,name=isMore" json:"isMore,omitempty"`
}

func (m *DbPageRsp) Reset()                    { *m = DbPageRsp{} }
func (m *DbPageRsp) String() string            { return proto.CompactTextString(m) }
func (*DbPageRsp) ProtoMessage()               {}
func (*DbPageRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *DbPageRsp) GetDbs() []*DbInfo {
	if m != nil {
		return m.Dbs
	}
	return nil
}

func (m *DbPageRsp) GetPageNo() int32 {
	if m != nil {
		return m.PageNo
	}
	return 0
}

func (m *DbPageRsp) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *DbPageRsp) GetIsMore() int32 {
	if m != nil {
		return m.IsMore
	}
	return 0
}

// 所有数据库
type DbAllNameReq struct {
}

func (m *DbAllNameReq) Reset()                    { *m = DbAllNameReq{} }
func (m *DbAllNameReq) String() string            { return proto.CompactTextString(m) }
func (*DbAllNameReq) ProtoMessage()               {}
func (*DbAllNameReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

// 所有数据库
type DbAllNameRsp struct {
	Dbs []*DbInfo `protobuf:"bytes,1,rep,name=dbs" json:"dbs,omitempty"`
}

func (m *DbAllNameRsp) Reset()                    { *m = DbAllNameRsp{} }
func (m *DbAllNameRsp) String() string            { return proto.CompactTextString(m) }
func (*DbAllNameRsp) ProtoMessage()               {}
func (*DbAllNameRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *DbAllNameRsp) GetDbs() []*DbInfo {
	if m != nil {
		return m.Dbs
	}
	return nil
}

// 连接
type DbConnectReq struct {
	Id     int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DbName string `protobuf:"bytes,2,opt,name=dbName" json:"dbName,omitempty"`
}

func (m *DbConnectReq) Reset()                    { *m = DbConnectReq{} }
func (m *DbConnectReq) String() string            { return proto.CompactTextString(m) }
func (*DbConnectReq) ProtoMessage()               {}
func (*DbConnectReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *DbConnectReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DbConnectReq) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

// 连接
type DbConnectRsp struct {
	Key       string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id        int64    `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	DbName    string   `protobuf:"bytes,3,opt,name=dbName" json:"dbName,omitempty"`
	TableName []string `protobuf:"bytes,4,rep,name=tableName" json:"tableName,omitempty"`
}

func (m *DbConnectRsp) Reset()                    { *m = DbConnectRsp{} }
func (m *DbConnectRsp) String() string            { return proto.CompactTextString(m) }
func (*DbConnectRsp) ProtoMessage()               {}
func (*DbConnectRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *DbConnectRsp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DbConnectRsp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DbConnectRsp) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *DbConnectRsp) GetTableName() []string {
	if m != nil {
		return m.TableName
	}
	return nil
}

func init() {
	proto.RegisterType((*DbInfo)(nil), "pb.DbInfo")
	proto.RegisterType((*DbCreateOrModifyReq)(nil), "pb.DbCreateOrModifyReq")
	proto.RegisterType((*DbCreateOrModifyRsp)(nil), "pb.DbCreateOrModifyRsp")
	proto.RegisterType((*DbDetailByIDReq)(nil), "pb.DbDetailByIDReq")
	proto.RegisterType((*DbDetailByIDRsp)(nil), "pb.DbDetailByIDRsp")
	proto.RegisterType((*DbPageReq)(nil), "pb.DbPageReq")
	proto.RegisterType((*DbPageRsp)(nil), "pb.DbPageRsp")
	proto.RegisterType((*DbAllNameReq)(nil), "pb.DbAllNameReq")
	proto.RegisterType((*DbAllNameRsp)(nil), "pb.DbAllNameRsp")
	proto.RegisterType((*DbConnectReq)(nil), "pb.DbConnectReq")
	proto.RegisterType((*DbConnectRsp)(nil), "pb.DbConnectRsp")
}

func init() { proto.RegisterFile("tool.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0xe3, 0x30,
	0x10, 0x86, 0x15, 0xbb, 0x89, 0x36, 0xb3, 0xab, 0x2e, 0x32, 0x02, 0x45, 0x55, 0x0f, 0xc1, 0xa7,
	0x1c, 0xa0, 0x12, 0x20, 0x71, 0x45, 0xd0, 0x5c, 0x7a, 0x68, 0x41, 0xe6, 0x09, 0x62, 0xec, 0x56,
	0x11, 0x21, 0x76, 0xe3, 0x54, 0xa8, 0x3c, 0x01, 0x8f, 0x8d, 0xec, 0x84, 0x10, 0xaa, 0x02, 0xb7,
	0xf9, 0x27, 0x33, 0xdf, 0x3f, 0xf1, 0x0c, 0x40, 0xad, 0x54, 0x31, 0xd1, 0x95, 0xaa, 0x15, 0x41,
	0x9a, 0xd3, 0x37, 0x0f, 0x82, 0x94, 0xcf, 0xca, 0xa5, 0x22, 0x04, 0x06, 0x65, 0xf6, 0x2c, 0x23,
	0x2f, 0xf6, 0x92, 0x90, 0xb9, 0x98, 0x0c, 0x01, 0xe5, 0x3a, 0x42, 0x2e, 0x83, 0x72, 0x6d, 0x6b,
	0xb4, 0xaa, 0xea, 0x08, 0xc7, 0x5e, 0xe2, 0x33, 0x17, 0x93, 0x11, 0xfc, 0xd9, 0x18, 0x59, 0x2d,
	0x6c, 0xef, 0xc0, 0x55, 0x76, 0xda, 0x7e, 0xd3, 0x99, 0x31, 0x2f, 0xaa, 0x12, 0x91, 0xdf, 0x7c,
	0xfb, 0xd0, 0x8e, 0x2d, 0xa2, 0x20, 0xf6, 0x12, 0xcc, 0x50, 0x2e, 0xe8, 0x39, 0x1c, 0xa6, 0x7c,
	0x5a, 0xc9, 0xac, 0x96, 0x77, 0xd5, 0x5c, 0x89, 0x7c, 0xb9, 0x65, 0x72, 0x4d, 0x46, 0x80, 0x04,
	0x77, 0x43, 0xfd, 0xbd, 0x80, 0x89, 0xe6, 0x93, 0x66, 0x5c, 0x86, 0x04, 0xa7, 0x47, 0x7b, 0x5a,
	0x8c, 0xa6, 0x27, 0xf0, 0x3f, 0xe5, 0xa9, 0xac, 0xb3, 0xbc, 0xb8, 0xdd, 0xce, 0x52, 0x4b, 0x69,
	0xcc, 0xbc, 0xce, 0xec, 0x6c, 0xa7, 0xc4, 0xe8, 0x1f, 0x8d, 0xae, 0x21, 0x4c, 0xf9, 0x7d, 0xb6,
	0x92, 0x96, 0x75, 0x0c, 0x81, 0xce, 0x56, 0x72, 0xa1, 0x5c, 0xb1, 0xcf, 0x5a, 0xd5, 0xfc, 0xec,
	0x4a, 0x3e, 0xe4, 0xaf, 0xd2, 0x3d, 0x99, 0xcf, 0x3a, 0x4d, 0x37, 0x1d, 0xc0, 0x68, 0x32, 0x06,
	0x2c, 0xb8, 0x89, 0xbc, 0x18, 0xef, 0x58, 0xd9, 0x74, 0x0f, 0x8f, 0xbe, 0xc5, 0xe3, 0xaf, 0x78,
	0xdb, 0x93, 0x9b, 0xb9, 0xaa, 0x9a, 0x0d, 0xf8, 0xac, 0x55, 0x74, 0x08, 0xff, 0x52, 0x7e, 0x53,
	0x14, 0x76, 0x19, 0x4c, 0xae, 0xe9, 0x69, 0x5f, 0xff, 0x36, 0x09, 0xbd, 0xb2, 0xd5, 0x53, 0x55,
	0x96, 0xf2, 0xb1, 0xde, 0xf3, 0x88, 0xd6, 0x55, 0x70, 0xb7, 0xf7, 0xe6, 0x42, 0x5a, 0x45, 0x97,
	0xfd, 0x3e, 0xa3, 0xc9, 0x01, 0xe0, 0x27, 0xb9, 0x6d, 0x0f, 0xcb, 0x86, 0x2d, 0x09, 0xed, 0x21,
	0xe1, 0x3e, 0x89, 0x8c, 0x21, 0xac, 0x33, 0x5e, 0xc8, 0xf6, 0xb8, 0x70, 0x12, 0xb2, 0xcf, 0x04,
	0x0f, 0xdc, 0x1d, 0x5f, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x17, 0x74, 0xce, 0xd5, 0x02,
	0x00, 0x00,
}
